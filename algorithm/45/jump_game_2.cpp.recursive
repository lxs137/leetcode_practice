class Solution {
public:
    // startIdx, minJumpTimes
    map<int, int> reaches;
    int jump(vector<int>& nums) {
        if (nums.size() <= 1)
            return 0;
        int jumpTimes = tryReach(nums, 0);
        for (auto &item : reaches) {
            cout << item.first << ": " << item.second << endl;
        }
        return jumpTimes;
    }
    // -1: can not reach
    // >=0: jump times 
    int tryReach(vector<int>& nums, int startIdx) {
        auto hasExist = reaches.find(startIdx);
        if (hasExist != reaches.end()) {
            return hasExist->second;
        }
        int n = nums.size() - 1;
        if (startIdx == n) {
            reaches.emplace(startIdx, 0);
            return 0;                
        } else if (startIdx > n) {
            return -1;
        } else {
            int step = nums[startIdx], minJump = -1;
            if (step == 0) {
                reaches.emplace(startIdx, -1);
                return -1;
            } else if (step == 1) {
                return tryReach(nums, startIdx + 1);
            }
            while (step > 1) {
                int reachJump = tryReach(nums, startIdx + step);
                if (reachJump >= 0 && (minJump == -1 || reachJump < minJump))
                    minJump = reachJump;
                step--;
            }
            if (minJump == -1) {
                reaches.emplace(startIdx, -1);
                return -1;
            } else {
                reaches.emplace(startIdx, 1 + minJump);
                return 1 + minJump;
            }
        }
    }
};